//Підключення шрифту
@mixin font($font_name, $file_name, $weight, $style) {
	@font-face {
		font-family: $font_name;
		font-display: swap;
		src: url("../fonts/#{$file_name}.woff2") format("woff2"), url("../fonts/#{$file_name}.woff") format("woff");
		font-weight: #{$weight};
		font-style: #{$style};
	}
}
//Percent
@function percent($px, $from) {
	$result: math.div($px, $from) * 100%;
	@return $result;
}
//REM
@function rem($px) {
	$result: math.div($px, 16) + rem;
	@return $result;
}
//EM
@function em($px, $current: 16) {
	$result: math.div($px, $current) + em;
	@return $result;
}

//Currency
@mixin currency($sym) {
	&::after {
		content: "#{$sym}";
	}
}

// Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
	display: grid;
	gap: $gap;
	grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}

// Адаптивна властивість (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $keepSize: 0, $widthFrom: $containerWidth, $widthTo: $minWidth) {
	@if ($startSize==0) {
		$startSize: 0.000001;
	}
	@if ($minSize==0) {
		$minSize: 0.000001;
	}

	// Для calc();
	$addSize: math.div($startSize - $minSize, 16);

	@if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
		$widthFrom: $maxWidth;
	}

	// Брейк-поїнти в EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Формула плаваючого значення
	// Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;
	@if ($yIntersection==0) {
		$yIntersection: 0.000001;
	}
	$flyValue: #{rem($yIntersection)}" + " #{$slope * 100}vw;

	// Отримання значення властивості
	$propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};
	// Якщо негативні значення
	@if ($minSize > $startSize) {
		$propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
	}

	// Встановлюємо значення за замовчуванням
	@if $keepSize != 1 and $keepSize != 3 {
		@media (min-width: $widthFromMedia) {
			#{$property}: rem($startSize);
		}
	}
	// Адаптуємо розмір у проміжку між зазначеними ширинами в'юпорту
	@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
		// Якщо підтримується clamp();
		@supports (#{$property}: $propertyValue) {
			#{$property}: $propertyValue;
		}
		// Якщо не підтримується clamp();
		@supports not (#{$property}: $propertyValue) {
			#{$property}: calc(#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
		}
	}
	@if $keepSize != 1 and $keepSize != 2 {
		@media (max-width: $widthToMedia) {
			#{$property}: rem($minSize);
		}
	}
}

@mixin button($w:inherit, $h:inherit, $fz:rem(16), $lh:325%, $bg-color:$primaryColor, $color-btn: $whiteColor, $bg-circleColor:transparent, $circleColor-btn:$secondaryColor, $circle:false) {
   @if $circle {
      color: $circleColor-btn;
      background-color: $bg-circleColor;
      position: relative;
      z-index: 50;
      border-radius: 50%;
      width: rem(48);
      height: rem(48);
      font-size: rem(24);
      transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;

      @media (max-width:$tablet){
         background-color: $primaryColor;
         color: $whiteColor;
      }

         @media (any-hover: hover){
            &:focus {
               outline: rem(2) solid $primaryColor;
               outline-offset: rem(2);
            }
            &:hover{
               color: $whiteColor;
               background-color: $primaryColor;
            }
            &:active {
               color: $primaryColor;
         }
      }
   }

   @else {
      width: $w;
      height: $h;
      color: $color-btn;
      background-color: $bg-color;
      font-size: $fz;
      line-height: $lh;
      display: flex;
      justify-content: center;
      align-items: center;
      text-transform: uppercase;
      font-weight: 700;
      letter-spacing: rem(0.5);
      border-radius: rem(4);
      border-width: rem(1);
      border-style: solid;
      border-color: $primaryColor;
      transition: background-color 0.3s ease-in, color 0.3s ease-in, border-color 0.3s ease-in;

      @media (max-width:$mobileSmall){
         width: rem(170);
         height: rem(38);
         font-size: rem(14);
         line-height: math.div(44 , 14);
      }

         @media (any-hover: hover){
            &:focus {
               outline: rem(2) solid $primaryColor;
               outline-offset: rem(2);
               border-radius: rem(2);
            }
            &:hover{
               color: $whiteColor;
               background-color: $color-active;
            }
            &:active {
               background-color: $color-active;
         }
      }
   }
}
